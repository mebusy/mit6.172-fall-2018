
{
  "title":"Readings",
  "content":"6.172 has no required readings. This is a list of supplemental readings. Zhang, Yunming, Mengjiao Yang, et al. \u0026ldquo;GraphIt: A High-Performance Graph DSL.\u0026rdquo; Proceedings of the ACM on Programming Languages 2 (2018): article no. 121. Ansel, Jason, Shoaib Kamil, et al. \u0026ldquo;OpenTuner: An Extensible Framework for Program Autotuning.\u0026rdquo; Proceedings of the 23rd International Conference on Parallel Architectures and Compilation (2014): 303–316. Leiserson, Charles. \u0026ldquo;The Cilk++ Concurrency Platform.\u0026rdquo; The Journal of Supercomputing 51, no. 3 (2010): 244–257. Leiserson, Charles and Ilya Mirman. \u0026ldquo;How to Survive the Multicore Software Revolution (or at Least Survive the Hype) (PDF - 3.5MB).\u0026rdquo; Frigo, Matteo, Charles Leiserson, and Keith Randall. \u0026ldquo;The Implementation of the Cilk-5 Multithreaded Language.\u0026rdquo; Proceedings of the 1998 ACM Sigplan Conference on Programming Language Design and Implementation (PLDI) (1998). He, Yuxiong, Charles Leiserson, and William Leiserson. \u0026ldquo;The Cilkview Scalability Analyzer.\u0026rdquo; Proceedings of the Twenty-Second Annual ACM Symposium on Parallelism in Algorithms and Architectures (2010): 145–156. Mytkoqicz, Todd, Amer Diwan, et al. \u0026ldquo;Producing Wrong Data Without Doing Anything Obviously Wrong.\u0026rdquo; Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems (2009): 265–276. Berger, Emery, Kathryn McKinley, et al. \u0026ldquo;Hoard: A Scalable Memory Allocator for Multithreaded Applications (PDF).\u0026rdquo; Proceedings of the 9th International Conference on Architectural Support for Programming Languages and Operating Systems (2000): 117–128.\nKuszmaul, Bradley. \u0026ldquo;SuperMalloc: A Super Fast Multithreaded Malloc for 64-bit Machines.\u0026rdquo; Proceedings of the 2015 International Symposium on Memory Management (2015): 41–55. Schardl, Tao, William Moses, and Charles Leiserson. \u0026ldquo;Tapir: Embedding Fork-Join Parallelism into LLVM\u0026rsquo;s Intermediate Representation.\u0026rdquo; Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (2017): 249–265.\nFrigo, Matteo, Charles Leiserson, et al. \u0026ldquo;Cache-Oblivious Algorithms.\u0026rdquo; ACM Transactions on Algorithms (TALG) 8, no. 1 (2012): article no. 4. Demaine, Erik. \u0026ldquo;Cache-Oblivious Algorithms and Data Structures\u0026rdquo; in Lecture Notes from the EEF Summer School on Massive Data Sets, BRICS (2002). Leiserson, Charles. \u0026ldquo;A Simple Deterministic Algorithm for Guaranteeing the Forward Progress of Transactions.\u0026rdquo; Information Systems 57 (2016): 69–74.\n"}


